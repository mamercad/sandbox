name: pr-changed

on:
  # push:
  #   branches:
  #     - mamercad/issue-280
  pull_request_target:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

# concurrency:
#   group: cloud-integration-tests
#   cancel-in-progress: false

jobs:
  integration:
    # Require reviewers for this environment
    # https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
    # environment: integration
    runs-on: ubuntu-latest
    # timeout-minutes: 120
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files in the plugins/module_utils folder
        id: changed-module-utils
        uses: tj-actions/changed-files@v30
        with:
          files: |
            plugins/module_utils/**

      - name: Get changed files in the plugins/modules folder
        id: changed-modules
        uses: tj-actions/changed-files@v30
        with:
          files: |
            plugins/modules/**

      - name: Create module_utils matrix (changed module_utils)
        id: changed-module-utils-matrix
        if: steps.changed-module-utils.outputs.any_changed == 'true'
        run: |
          echo "One or more files in the module_utils folder has changed."
          echo "List all the files that have changed: ${{ steps.changed-module-utils.outputs.all_changed_files }}"
          basenames=()
          for file in ${{ steps.changed-module-utils.outputs.all_changed_files }}; do
            basenames+=($(basename $file .py))
          done
          printf '::set-output name=matrix::%s\n' $(printf '%s\n' "${basenames[@]}" | jq -R . | jq -sc .)

      - name: Create module matrix (changed modules)
        id: changed-modules-matrix
        if: steps.changed-modules.outputs.any_changed == 'true'
        run: |
          echo "One or more files in the modules folder has changed."
          echo "List all the files that have changed: ${{ steps.changed-modules.outputs.all_changed_files }}"
          basenames=()
          for file in ${{ steps.changed-modules.outputs.all_changed_files }}; do
            basenames+=($(basename $file .py))
          done
          printf '::set-output name=matrix::%s\n' $(printf '%s\n' "${basenames[@]}" | jq -R . | jq -sc .)

    outputs:
      module_utils_matrix: ${{ steps.changed-modules-utils.matrix.outputs.matrix || '["empty"]' }}
      module_matrix: ${{ steps.changed-modules-matrix.outputs.matrix || '["empty"]' }}

  test-module-utils:
    runs-on: ubuntu-latest
    needs: [integration]
    strategy:
      fail-fast: true
      matrix:
        module: ${{ fromJson(needs.changed-modules-utils-matrix.outputs.matrix || '["empty"]') }}
    steps:
      - name: Perform testing (changed module_utils)
        if: ${{ matrix.module != 'empty' }}
        run: |
          echo "Testing module_util ${{ matrix.module }}."

  test-module:
    runs-on: ubuntu-latest
    needs: [integration]
    strategy:
      fail-fast: true
      matrix:
        module: ${{ fromJson(needs.changed-modules-matrix.outputs.matrix || '["empty"]') }}
    steps:
      - name: Perform testing (changed modules)
        if: ${{ matrix.module != 'empty' }}
        run: |
          echo "Testing module ${{ matrix.module }}."
